<?php

namespace App\Base;

use App\Model\AdminUser;
use EasySwoole\EasySwoole\Config;
use App\Utility\Message\Status;


/**
 * 前台用户基类
 * Class FrontUserController
 * @package App\Base
 */
class FrontUserController extends BaseController
{
	protected $auth;   // 保存了登录用户的信息
	protected $isCheckSign = false;

    public $no_need_sign_keys = ['content', 'id'];
    private $sign_key = 'sign';
    /**
     * 加密或者验签
     * @param $params
     * @param bool $checked
     * @return bool|string
     */
    public function checkSign($params) {
        ksort($params); //ascii升序
        $sSafeStr = ''; //加密字段
        foreach ($params as $k => $v) {
            if ($k != $this->sign_key &&  !in_array($k, $this->no_need_sign_keys)) {
                $sSafeStr .= $k.'='.$v.'&';
            }
        }

        $sSafeStr = rtrim($sSafeStr, '&');
        if (!isset($params[$this->sign_key]) || md5($sSafeStr) != $params[$this->sign_key]) {
            $this->writeJson(403, '验签不通过');
            return false;
        }
        return true;
    }

	// 检查token 是否合法
	public function checkToken()
	{
		$r = $this->request();
        $authoriazation = $r->getHeader('token');
        $loginToken = isset($authoriazation[0]) ? json_decode(stripslashes($authoriazation[0]), true) : [];
        if (!$loginToken || empty($loginToken['front_id']) || empty($loginToken['front_time']) || empty($loginToken['front_token'])) return false;
        $id = (int)$loginToken['front_id'];
        $time = trim($loginToken['front_time']);
        $token = md5($id . Config::getInstance()->getConf('app.token') . $time);
        if($loginToken['front_token'] == $token) {
            $this->auth = AdminUser::create()->where('id', $id)->get();
			return true;
		} else {
			return false;
		}
	}



	public $params;
    public $needCheckToken = false;
    public $needLogin = false;

	public $no_need_check_rule = [
        '/User/Login',
        '/User/System/detail',
        '/User/Post/detail',
        '/User/User/userSendSmg',
    ];

	public function onRequest(?string $action): ?bool
	{
	    $this->params = $this->request()->getRequestParam();
	    if ($this->needCheckToken) {
	        if(!$this->checkToken()) {
	            $this->writeJson(Status::CODE_VERIFY_ERR, '登陆令牌缺失或者已过期');
	            return false;

            }
        } else {
            $authoriazation = $this->request()->getHeader('token');
            $loginToken = isset($authoriazation[0]) ? json_decode($authoriazation[0], true) : [];
	        if (!empty($loginToken['front_id'])) {
                $this->checkToken();
            }
        }
        $api = $this->request()->getUri()->getPath();
	    if ($this->isCheckSign && !in_array($api, $this->no_need_check_rule) && !empty($this->params)) {
	        return $this->checkSign($this->params);
        }


	    return parent::onRequest($action);
	}

    /**
     * gc 方法将在执行完 afterAction 方法之后自动调用，可自行覆盖实现其他的 gc 回收逻辑
     *
     * CreateTime: 2020/8/19 12:52 上午
     */
    public function gc()
    {
        parent::gc(); // TODO: Change the autogenerated stub
    }

}